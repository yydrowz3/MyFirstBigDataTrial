<template>
  <div>
	<el-row>
      <el-col :span="18"
        ><div class="select-box">
          <el-form :inline="true" :model="selectData" class="demo-form-inline">
            <el-form-item label="学校名称">
              <el-input
                v-model="selectData.schoolName"
                placeholder="请输入学校名称"
              />
            </el-form-item>
            <el-form-item label="专业名称">
              <el-input
                v-model="selectData.profess"
                placeholder="请输入专业名称"
              />
            </el-form-item>
            <el-form-item>
              <el-button type="success" @click="onQuery">查询</el-button>
            </el-form-item>
          </el-form>
        </div></el-col
      >
      <el-col :span="6">
        <el-button
          type="primary"
          @click="addInfo"
          class="add-btn"
          style="float: right"
          >添加</el-button
        >
      </el-col>
    </el-row><<<<<<< .mine      <el-col :span="18"
        ><div class="select-box">
          <el-form :inline="true" :model="selectData" class="demo-form-inline">
            <el-form-item label="学校名称">
              <el-input
                v-model="selectData.schoolName"
                placeholder="请输入学校名称"
              />
            </el-form-item>
            <el-form-item label="专业名称">
              <el-input
                v-model="selectData.profess"
                placeholder="请输入专业名称"
              />
            </el-form-item>
            <el-form-item>
              <el-button type="success" @click="onQuery">查询</el-button>
            </el-form-item>
          </el-form>
        </div></el-col
      >
      <el-col :span="6">
        <el-button
          type="primary"
          @click="addInfo"
          class="add-btn"
          style="float: right"
          >添加</el-button
        >
      </el-col>
    </el-row>

=======      <el-form :inline="true" :model="selectData" class="demo-form-inline">
        <el-form-item label="学校名称">
          <el-input v-model="selectData.schoolName" placeholder="请输入学校名称" />
        </el-form-item>
        <el-form-item label="专业名称">
          <el-input v-model="selectData.profess" placeholder="请输入专业名称" />
        </el-form-item>
        <el-form-item>
          <el-button type="success" @click="onQuery">查询</el-button>
        </el-form-item>
      </el-form>
    </div>
>>>>>>> .theirs    <div>
      >
        <el-table-column prop="id" label="ID" />
        <el-table-column prop="schoolCode" label="学校代码" />
        <el-table-column prop="schoolName" label="学校名称" />
        <el-table-column prop="province" label="省份" />
        <el-table-column prop="majorCode" label="专业代码" />
        <el-table-column prop="profess" label="专业名称" />
        <el-table-column prop="subject" label="专业类别" />
        <el-table-column prop="batch" label="录取批次" />
        <el-table-column prop="plan" label="招生人数" />
        <el-table-column fixed="right" label="操作" width="160">
          <template #default="scope">
            <el-button round type="primary" @click="editInfo(scope.row)">编辑</el-button>
            <el-button round type="danger" @click="deleteInfo(scope.row)">删除</el-button>
          </template>
        </el-table-column>
      </el-table>
      />
    </div>
    <div>
      <el-dialog v-model="isShow" :title="status === 0 ? '新增' : '编辑'">
        <el-form :model="activeData" inline :rules="rules" ref="formRef">
          <el-form-item label="ID" prop="id">
            <el-input
              placeholder="请输入ID"
              v-model.number="activeData.id"
              autocomplete="off"
              disabled
            />
          </el-form-item>
          <el-form-item label="学校代码" prop="schoolCode">
            <el-input
              placeholder="请输入学校代码"
              v-model="activeData.schoolCode"
              autocomplete="off"
            />
          </el-form-item>
          <el-form-item label="学校名称" prop="schoolName">
            <el-input
              placeholder="请输入学校名称"
              v-model="activeData.schoolName"
              autocomplete="off"
            />
          </el-form-item>
          <el-form-item label="省份" prop="province">
            <el-input
              placeholder="请输入省份"
              v-model="activeData.province"
              autocomplete="off"
            />
          </el-form-item>
          <el-form-item label="专业代码" prop="majorCode">
            <el-input
              placeholder="请输入专业代码"
              v-model="activeData.majorCode"
              autocomplete="off"
            />
          </el-form-item>
          <el-form-item label="专业名称" prop="profess">
            <el-input
              placeholder="请输入专业名称"
              v-model="activeData.profess"
              autocomplete="off"
            />
          </el-form-item>
          <el-form-item label="专业类别" prop="subject">
            <el-input
              placeholder="请输入专业类别"
              v-model="activeData.subject"
              autocomplete="off"
            />
          </el-form-item>
          <el-form-item label="录取批次" prop="batch">
            <el-input
              placeholder="请输入录取批次"
              v-model.number="activeData.batch"
              autocomplete="off"
            />
          </el-form-item>
          <el-form-item label="招生人数" prop="plan">
            <el-input
              placeholder="请输入招生人数"
              v-model.number="activeData.plan"
              autocomplete="off"
            />
          </el-form-item>
        </el-form>
        <template #footer>
          <span class="dialog-footer">
            <el-button @click="isShow = false">取消</el-button>
            <el-button type="primary" @click="dialogConfirm(formRef)"
              >确认</el-button
            >
          </span>
        </template>
      </el-dialog>
    </div>
  </div>
</template>

<script lang="ts">
import { defineComponent, reactive, toRefs, onMounted, ref } from 'vue';
import { InitData, SchoolInfoListInt } from '@/types/admin/schoolInfo';
import { getSchoolInfo, deleteOneSchoolInfo } from '@/http/adminApi';
import { ElMessage, ElMessageBox } from 'element-plus';
import type { FormInstance } from 'element-plus';

export default defineComponent({
  setup() {
    const data = reactive(new InitData());
    // const data = reactive({})
    onMounted(() => {
      
      getSchoolInfo({ pageNum: 1, pageSize: 10 }).then((res) => {
        data.selectData.count = res.data.tatalSize;

        data.infoTotalList = res.data.content;

        sliceData(data.infoTotalList)
        console.log(data);
         

      }).catch(
        (err) => {
          console.log(err);

        }
      )
    });
    const sliceData = (totalList: SchoolInfoListInt[]) => {
      console.log(totalList);
      data.infoPageList = [];
      for (let index = 0; index < totalList.length; index += 10) {
        // data.list.push(arr.slice(index, index + 10));
        let list: any = totalList.slice(index, index + 10);
        data.infoPageList.push(list);
      }
    };

    const currentChange = (page: number) => {
      data.selectData.page = page;
    };
    const onQuery = () => {
      console.log(data.selectData);
      let tempData: SchoolInfoListInt[] = [];
      if (data.selectData.schoolName || data.selectData.profess) {
        if (data.selectData.schoolName && !data.selectData.profess) {
          tempData = data.infoTotalList.filter(
            (v) => v.schoolName.indexOf(data.selectData.schoolName) != -1
          );
        } else if (!data.selectData.schoolName && data.selectData.profess) {
          tempData = data.infoTotalList.filter(
            (v) => v.profess.indexOf(data.selectData.profess) != -1
          );
        } else {
          tempData = data.infoTotalList.filter(
            (v) => v.schoolName.indexOf(data.selectData.schoolName) != -1
          );
          tempData = tempData.filter(
            (v) => v.profess.indexOf(data.selectData.profess) != -1
          );
        }
      } else {
        tempData = data.infoTotalList;
      }
      sliceData(tempData);
    };

    const editInfo = (row: SchoolInfoListInt) => {
      console.log(row);
      data.isShow = true;
      data.status = 1;
      data.activeData = row;
    };

    const deleteInfo = (row: SchoolInfoListInt) => {
      console.log(row);
      ElMessageBox.confirm(
        '这将会永久删除该信息，是否继续？',
        '删除该招生计划信息？',
        {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning',
        }
      )
        .then(() => {
          deleteOneSchoolInfo(row)
            .then(() => {
              data.infoTotalList.forEach((item, index, arr) => {
                if (item.id === row.id) {
                  arr.splice(index, 1);
                }
              });
              data.selectData.count -= 1;
              console.log(data.selectData.count);

              sliceData(data.infoTotalList);
              ElMessage({
                type: 'success',
                message: '删除成功',
              });
            })
            .catch(() => {
              ElMessage({
                type: 'error',
                message: '删除失败',
              });
            });
        })
        .catch(() => {
          ElMessage({
            type: 'info',
            message: '取消删除',
          });
        });
    };

    const clearActive = () => {
      data.activeData.id = null;
      data.activeData.schoolCode = '';
      data.activeData.schoolName = '';
      data.activeData.province = '';
      data.activeData.majorCode = '';
      data.activeData.profess = '';
      data.activeData.subject = '';
      data.activeData.batch = null;
      data.activeData.plan = null;
    };

    const addInfo = () => {
      data.isShow = true;
      data.status = 0;
      clearActive();
      data.activeData.id = data.selectData.count + 1;
    };

    const rules = {
      batch: [
        { required: true, message: '请输入录取批次' },
        { type: 'number', message: '录取批次为数字' },
      ],
      plan: [
        { required: true, message: '请输入招生人数' },
        { type: 'number', message: '招生人数为数字' },
      ],
      schoolCode: [{ required: true, message: '请输入学校代码' }],
      schoolName: [{ required: true, message: '请输入学校名称' }],
      province: [{ required: true, message: '请输入省份' }],
      majorCode: [{ required: true, message: '请输入专业代码' }],
      profess: [{ required: true, message: '请输入专业名称' }],
      subject: [{ required: true, message: '请输入专业类别' }],
    };

    const dialogConfirm = (formRef: FormInstance) => {
      console.log('hi');
      data.isShow = false;
      console.log(data.activeData);
      formRef.validate((valid: boolean) => {
        if (valid) {
          console.log('valid');
        }
      });

      if (data.status === 0) {
        console.log('add');
      } else if (data.status === 1) {
        console.log('edit');
      }
    };

    return {
      ...toRefs(data),
      onMounted,
      currentChange,
      onQuery,
      editInfo,
      deleteInfo,
      dialogConfirm,
      addInfo,
      rules,
    };
  },
});
</script>

<style scoped>
.pagination {
  float: right;
  margin-top: 10px;
}
</style>
