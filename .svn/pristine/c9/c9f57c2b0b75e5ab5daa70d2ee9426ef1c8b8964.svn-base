<template>
  <div class="main-box">
    <div class="head">

      <el-upload enctype="multipart/form-data" class="avatar-uploader" action="http://localhost:8080/upload/avatar"
        :show-file-list="false" :on-success="handleAvatarSuccess" :before-upload="beforeAvatarUpload"
        :data="uploadData">
        <img v-if="imageUrl" :src="imageUrl" class="avatar user" />
      </el-upload>

    </div>
    <div class="bottom">
      <div class="userm">
        <h4>用户信息</h4>
        <ul title="用户信息">
          <li>用户名：{{ user.nickName }}</li>
          <li>姓名：{{ user.realName }}</li>
          <li>性别：{{ user.sex }}</li>
          <li>电话：{{ user.teleNumber }}</li>
          <li>Email：{{ user.email }}</li>
        </ul>
      </div>
      <div class="btn">
        <el-button @click="submit()" type="primary" plain>修改个人信息</el-button>
      </div>
    </div>
  </div>
</template>


<script lang="ts">
import view from '../../util/view'
import { defineComponent, ref } from "vue";
import { useRouter } from 'vue-router'
import { baseUrl } from '../../types/baseUrl'
import { ElMessage, UploadProps } from 'element-plus'
import { getOne } from '../../http/api'

export default defineComponent({
  setup() {
    const mixins= [view]
    const router = useRouter()
    const submit = () => {
      router.push('/userchange')
    }
    const user = JSON.parse(localStorage.getItem("user"));
    // console.log(user);

    const uploadData = {
      id: JSON.parse(localStorage.getItem("user")).id
    }

    const imageUrl = ref(baseUrl + "/" + user.avatar)
    // console.log(imageUrl);

    const handleAvatarSuccess: UploadProps['onSuccess'] = (response, uploadFile) => {
      // console.log(response);

      imageUrl.value = URL.createObjectURL(uploadFile.raw!)
      ElMessage.success({
        message: '修改头像成功!',
        type: 'success'
      });
      getOne(uploadData).then(
        (res)=>{
          // console.log(res);
          localStorage.setItem('user', JSON.stringify(res.data.user))
          location.reload();
        }
      ).catch(
        (err)=>{
          // console.log(err);
        }
      )
      // console.log("s1");

    }

    const beforeAvatarUpload: UploadProps['beforeUpload'] = (rawFile) => {
      if (rawFile.type !== 'image/jpeg') {
        ElMessage.error('Avatar picture must be JPG format!')
        return false
      } else if (rawFile.size / 1024 / 1024 > 8) {
        ElMessage.error('Avatar picture size can not exceed 2MB!')
        return false
      }
      // console.log(uploadData);
      return true
    }
    return {
      user,
      submit,
      imageUrl,
      handleAvatarSuccess,
      beforeAvatarUpload,
      uploadData,
      mixins
    };
  },
});
</script>


<style lang="scss" scoped>
.btn {
  margin-top: 8vh;
  height: 4.5vh;
  margin-left: 38vw;
}

.bottom {
  float: left;
}

h4 {
  margin-top: 4vh;
  margin-left: 7vw;
}

li {
  letter-spacing: 1vh;
  width: 50vw;
  margin-top: 3vh;
  margin-left: 7vw;
  list-style-type: none;
}

.main-box {
  justify-content: space-between;
  align-items: center;
  div::-webkit-scrollbar {
  width: 0;
  }
  overflow: auto;
  height: 91vh;
  width: 85vw;
  background-color: rgb(255, 255, 255);
  box-shadow: 0px 0px 1px 1px rgb(225, 222, 222);
}

.head {
  background-color: rgb(117, 178, 190);
  float: left;
  height: 39vh;
  width: 85vw;

  .user {
    margin-left: 34vw;
    margin-top: 3vh;
    border-radius: 50%;
    height: 30vh;
    width: 30vh;
    box-shadow: 0px 0px 1px 1px rgb(0, 0, 0);
    float: left;
  }
}
</style>
